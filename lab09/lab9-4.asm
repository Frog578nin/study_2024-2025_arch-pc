%include 'in_out.asm'

SECTION .data
    msg: db "Сумма значений f(x): ", 0

SECTION .text
    global _start

_start:
    ; ---- Извлечение количества аргументов и имени программы ----
    pop ecx        ; Извлекаем количество аргументов (включая имя программы)
    pop edx        ; Извлекаем имя программы (не используем)
    sub ecx, 1     ; Уменьшаем количество аргументов (исключая имя программы)

    mov esi, 0     ; Инициализируем сумму f(x) в esi

next_arg:
    cmp ecx, 0
    jz end_loop    ; Если нет аргументов, перейти к выводу результата

    ; ---- Подготовка аргумента для подпрограммы ----
    pop eax        ; Извлекаем текущий аргумент x
    call atoi      ; Преобразовываем строку в число
    push eax       ; Помещаем аргумент x в стек для передачи в подпрограмму
    call calculate_f ; Вызываем подпрограмму calculate_f

    add esp, 4       ; Очищаем стек после возврата из calculate_f (удаляем аргумент x)
    add esi, eax      ; добавляем результат в сумму f(x)

    loop next_arg

end_loop:
    ; ---- Вывод результата ----
    mov eax, msg    ; Вывод сообщения "Сумма значений f(x): "
    call sprint
    mov eax, esi    ; Записываем сумму значений f(x) в регистр 'eax'
    call iprintLF   ; Вывод результата
    call quit       ; Выход из программы

; ---- Подпрограмма вычисления f(x) ----
calculate_f:
    push ebp       ; Сохраняем ebp
    mov ebp, esp     ; Устанавливаем ebp на вершину стека
    mov eax, [ebp + 8]; Получаем x из стека (x является аргументом)

    add eax, 10      ; Вычисляем 10+x
    mov ebx, 3        ; Загружаем 3 для умножения
    mul ebx            ; Умножаем (10 + x) на 3

    mov esp, ebp       ; Восстанавливаем esp
    pop ebp            ; Восстанавливаем ebp
    ret            ; Возврат из подпрограммы
