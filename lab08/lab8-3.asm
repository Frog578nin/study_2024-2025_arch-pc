%include 'in_out.asm'

SECTION .data
    msg: db "Результат: ", 0

SECTION .text
    global _start

_start:
    ; ---- Извлечение количества аргументов и имени программы ----
    pop ecx        ; Извлекаем количество аргументов из стека в 'ecx'
    pop edx        ; Извлекаем имя программы из стека (не используем его)
    sub ecx, 1     ; Уменьшаем ecx на 1 (не включая имя программы)

    ; ---- Инициализация произведения ----
    mov esi, 1     ; Используем 'esi' для хранения произведения, начинаем с 1

next:
    ; ---- Проверка, есть ли еще аргументы ----
    cmp ecx, 0h
    jz _end       ; Если аргументов нет, перейти к метке '_end'

    ; ---- Извлечение аргумента и умножение ----
    pop eax        ; Извлекаем следующий аргумент из стека
    call atoi      ; Преобразуем строку в число (eax = число)
    mul esi      ; Умножаем произведение esi на текущий аргумент eax
    mov esi, eax   ; Сохраняем произведение в esi
    loop next      ; Переход к обработке следующего аргумента

_end:
    ; ---- Вывод результата ----
    mov eax, msg    ; Вывод сообщения "Результат: "
    call sprint
    mov eax, esi    ; Записываем произведение в регистр 'eax'
    call iprintLF   ; Печатаем результат
    call quit       ; Завершение программы
